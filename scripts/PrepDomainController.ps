

# I used http://static.decontextualize.com/lines-to-json/ to convert this from lines to array
Install-PackageProvider -Name Nuget -MinimumVersion 2.8.5.201 -Force


Install-Module AWSPowerShell -Force
Import-Module AWSPowerShell
Import-Module ServerManager
Add-WindowsFeature RSAT-ADDS-Tools
Add-WindowsFeature -Name "RSAT-AD-PowerShell" â€“IncludeAllSubFeature
Import-module ActiveDirectory


Enable-PSRemoting -Force

$wmiDomain = Get-WmiObject Win32_NTDomain -Filter "DnsForestName = '$( (Get-WmiObject Win32_ComputerSystem).Domain)'"
$domain = $wmiDomain.DomainName

$adAdminSecret = Get-SECSecretValue -SecretId ADAdminCreds 
$adAdminSecretDict = ConvertFrom-Json $adAdminSecret.SecretString
#$adAdminAccountUsername = $domain+'\'+$adAdminSecretDict.username
$adAdminAccountUsername = $adAdminSecretDict.username
$adAdminPassword = ConvertTo-SecureString $adAdminSecretDict.password -AsPlainText -Force
$adAdminCred = New-Object System.Management.Automation.PSCredential -ArgumentList $adAdminAccountUsername,$adAdminPassword

[System.Security.Principal.WindowsIdentity]::GetCurrent().Name

Invoke-Command -Computer . -Credential $adAdminCred -ScriptBlock {  

    Import-Module AWSPowerShell
    Import-Module ServerManager
    Import-module ActiveDirectory

    $adAdminSecret = Get-SECSecretValue -SecretId ADAdminCreds 
    $adAdminSecretDict = ConvertFrom-Json $adAdminSecret.SecretString
    $adAdminAccountUsername = $adAdminSecretDict.username
    $adAdminPassword = ConvertTo-SecureString $adAdminSecretDict.password -AsPlainText -Force
    $adAdminCred = New-Object System.Management.Automation.PSCredential -ArgumentList $adAdminAccountUsername,$adAdminPassword

    $transitSecret = Get-SECSecretValue -SecretId IdentityAccountDomainControllerSecretsForAdConnectors 
    $transitSecretDict = ConvertFrom-Json $transitSecret.SecretString
    $adConnectorServiceAccountUsername = $transitSecretDict.AdConnectorServiceAccountUsername
    $adConnectorPassword = ConvertTo-SecureString $transitSecretDict.password -AsPlainText -Force





    #Install Chrome for end-user convienence. 
    #$Path = $env:TEMP; $Installer = "chrome_installer.exe"; Invoke-WebRequest "http://dl.google.com/chrome/install/375.126/chrome_installer.exe" -OutFile $Path\$Installer; Start-Process -FilePath $Path\$Installer -Args "/silent /install" -Verb RunAs -Wait; Remove-Item $Path\$Installer





    $rootdse = Get-ADRootDSE -Credential $adAdminCred

    $guidmap = @{}
    Get-ADObject -SearchBase ($rootdse.SchemaNamingContext) -LDAPFilter `
    "(schemaidguid=*)" -Properties lDAPDisplayName,schemaIDGUID -Credential $adAdminCred |
    % {$guidmap[$_.lDAPDisplayName]=[System.GUID]$_.schemaIDGUID}

    $extendedrightsmap = @{}
    Get-ADObject -SearchBase ($rootdse.ConfigurationNamingContext) -LDAPFilter `
    "(&(objectclass=controlAccessRight)(rightsguid=*))" -Properties displayName,rightsGuid -Credential $adAdminCred |
    % {$extendedrightsmap[$_.displayName]=[System.GUID]$_.rightsGuid}

    $domain = Get-ADDomain -Server $rootdse.dnsHostName -Credential $adAdminCred
    
    #Create AD Connector Group
    New-ADGroup -Name "Connectors" `
        -SamAccountName Connectors `
        -GroupCategory Security `
        -GroupScope Global `
        -DisplayName "AWS AD Connectors" `
        -Path $domain.UsersContainer `
        -Description "This group is for AWS AD Connector service accounts." `
        -Credential $adAdminCred
    

    #Create AD Connector Group
    New-ADGroup -Name 'CorporateVpnUsers' `
        -SamAccountName CorporateVpnUsers `
        -GroupCategory Security `
        -GroupScope Global `
        -DisplayName "Corporate VPN Users" `
        -Path $domain.UsersContainer `
        -Description "Members of this group are allowed to connect to the Transit account's Client VPN Endpoint." `
        -Credential $adAdminCred


    $vpnUserGroup = Get-ADGroup "CorporateVpnUsers" -Credential $adAdminCred
    $transitSecretDict.VpnUsersAdGroupSID = $vpnUserGroup.SID.Value

    Update-SECSecret -SecretString (ConvertTo-Json $transitSecretDict) -SecretId IdentityAccountDomainControllerSecretsForAdConnectors 



    New-PSDrive -Name AD -PSProvider ActiveDirectory -Server $domain.RIDMaster -Credential $adAdminCred -Root ""

    $usersOu = Get-ADOrganizationalUnit -Properties DistinguishedName -SearchBase ($domain.UsersContainer) -Filter * -Credential $adAdminCred
    $computersOu = Get-ADOrganizationalUnit -Properties DistinguishedName -SearchBase ($domain.ComputersContainer) -Filter * -Credential $adAdminCred    

    $usersAcl = get-acl "AD:\$usersOu"
    $computersAcl = get-acl "AD:\$computersOu"


    $sid=(Get-ADGroup "Connectors" -Credential $adAdminCred).SID
    $servicegroup = New-Object System.Security.Principal.SecurityIdentifier($sid)


    #TODO restrict these permissions way down. 
    $manageUsersRule = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $servicegroup,
                                                                                 "GenericAll",
                                                                                 "Allow",                                                                             
                                                                                 "All",
                                                                                 $guidmap["user"]

    $manageComputersRule = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $servicegroup,
                                                                                 "GenericAll",
                                                                                 "Allow",                                                                             
                                                                                 "All",
                                                                                 $guidmap["computer"]
    $usersAcl.AddAccessRule($manageUsersRule)
    $computersAcl.AddAccessRule($manageComputersRule)

  	                
    
    set-acl -aclobject $usersAcl -Path "AD:\$usersOu"
    set-acl -aclobject $computersAcl -Path "AD:\$computersOu"


    New-ADUser -Name $adConnectorServiceAccountUsername -SamAccountName $adConnectorServiceAccountUsername -Path $domain.UsersContainer -AccountPassword $adConnectorPassword -Enabled $True -Credential $adAdminCred

    $connectorAdUser = Get-ADUser -Filter {SamAccountName -eq $adConnectorServiceAccountUsername} -SearchBase $domain.UsersContainer -Properties * -Credential $adAdminCred
    Add-ADGroupMember -Identity (Get-ADGroup "Connectors" -Credential $adAdminCred) -Members $connectorAdUser.SamAccountName -Credential $adAdminCred
    
    $adminUser = Get-ADUser -Filter {SamAccountName -eq "admin"} -SearchBase $domain.UsersContainer -Properties * -Credential $adAdminCred
    Add-ADGroupMember -Identity (Get-ADGroup "CorporateVpnUsers" -Credential $adAdminCred) -Members $adminUser.SamAccountName -Credential $adAdminCred

}
